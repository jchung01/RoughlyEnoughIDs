import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.27'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = 'RoughlyEnoughIDs'

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'stable'
    mcpMappingVersion = '39'
    
    // Set username here, the UUID will be looked up automatically
    username = 'Developer'
    
    // Add any additional tweaker classes here
    extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')
    
    // Add various JVM arguments here for runtime
    def args = ["-ea:${project.group}"]
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)

    // Include and use dependencies' Access Transformer files
    useDependencyAccessTransformers = true
    
    // Add any properties you want to swap out for a dynamic value at build time here
    // Any properties here will be added to a class at build time, the name can be configured below
    injectedTags.put('MOD_ID', project.archives_base_name)
    injectedTags.put('MOD_NAME', project.mod_name)
    injectedTags.put('VERSION', project.version)
}

// Don't add coremod arg to runDeobf tasks
if (project.use_coremod.toBoolean()) {
    for (runTask in ['runClient', 'runServer']) {
        tasks.named(runTask).configure {
            extraJvmArgs.add('-Dfml.coreMods.load=' + coremod_plugin_class_name)
        }
    }
}

// Generate a group.archives_base_name.Tags class
tasks.injectTags.configure {
    // Change Tags class' name here:
    outputClassName.set("${project.group}.${project.archives_base_name}.Tags")
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    if (project.use_assetmover.toBoolean()) {
        implementation 'com.cleanroommc:assetmover:2.5'
    }
    if (project.use_mixins.toBoolean()) {
        implementation 'zone.rong:mixinbooter:8.0'
    }

    // Example of deobfuscating a dependency
    // implementation rfg.deobf('curse.maven:had-enough-items-557549:4543375')

    if (project.use_mixins.toBoolean()) {
        // Change your mixin refmap name here:
        String mixin = modUtils.enableMixins('org.spongepowered:mixin:0.8.3', "mixins.${project.archives_base_name}.refmap.json")
        api (mixin) {
            transitive = false
        }
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.guava:guava:24.1.1-jre'
        annotationProcessor 'com.google.code.gson:gson:2.8.6'
        annotationProcessor (mixin) {
            transitive = false
        }
    }
    compileOnly rfg.deobf("maven.modrinth:scapeandrunparasites:1.9.20")
    compileOnly rfg.deobf("maven.modrinth:wyrms:0.5.124")
    compileOnly rfg.deobf("curse.maven:biomes-o-plenty-220318:2842510")
    compileOnly rfg.deobf("curse.maven:twilightforest-227639:3051450")
    compileOnly rfg.deobf("curse.maven:thaumcraft-223628:2629023")
    compileOnly rfg.deobf("curse.maven:abyssalcraft-53686:3425234")
    compileOnly rfg.deobf("curse.maven:creeping-nether-268104:2655432")
    compileOnly rfg.deobf("curse.maven:geographicraft-76544:2497541")
    compileOnly rfg.deobf("curse.maven:mystcraft-224599:2958490")
    compileOnly rfg.deobf("curse.maven:hammercore-247401:3366814")
    // Advanced Rocketry 1.7.0 <- Build with this version
    compileOnly rfg.deobf("curse.maven:advancedrocketry-236542:3015079")
    // Advanced Rocketry 2.0.0
    // compileOnly rfg.deobf("curse.maven:advancedrocketry-236542:4671856")
    // Advanced Rocketry - Reworked (Fork by OberToffel)
    // compileOnly rfg.deobf('curse.maven:advancedrocketry-reworked-1024225:5486514')
    compileOnly rfg.deobf("curse.maven:libvulpes-236541:3434864")
    compileOnly rfg.deobf("curse.maven:worldedit-225608:2941712")
    compileOnly rfg.deobf("curse.maven:journeymap-32274:2916002")
    compileOnly rfg.deobf("curse.maven:bookshelf-228525:2836960")
    compileOnly rfg.deobf("curse.maven:cyclopscore-232758:3159497")
    compileOnly rfg.deobf("curse.maven:extrautils2-225561:2678374")
    compileOnly rfg.deobf("curse.maven:betweenlands-243363:3248202")
    compileOnly rfg.deobf("curse.maven:tofucraftreload-317469:3115668")
    compileOnly rfg.deobf("curse.maven:tropicraft-254794:2713918")
    compileOnly rfg.deobf("curse.maven:gaiadimension-302529:2724738")
    compileOnly rfg.deobf("curse.maven:biometweaker-228895:3112142")
    compileOnly rfg.deobf("curse.maven:baubles-227083:2518667")
    compileOnly rfg.deobf("curse.maven:patchouli-306770:3162874")
    compileOnly rfg.deobf("curse.maven:bewitchment-285439:3256343")
    compileOnly rfg.deobf("curse.maven:compact-machines-224218:2707509")
    compileOnly rfg.deobf("curse.maven:moreplanets-261990:5063201")
    compileOnly rfg.deobf("curse.maven:atum2-59621:3116599")
    compileOnly rfg.deobf("curse.maven:naturescompass-252848:2893527")
    compileOnly rfg.deobf("curse.maven:biomestaff-299907:2597577")
    compileOnly rfg.deobf("curse.maven:kathairis-291129:2710928")

    compileOnly rfg.deobf("curse.maven:cubicchunks-292243:5135427")
    // RTG+ should also work
    compileOnly rfg.deobf("curse.maven:rtg-unofficial-648514:4696300")
    compileOnly rfg.deobf("curse.maven:chunk-pregenerator-267193:5632153")

    // Chunk Pregenerator dependency
    // runtimeOnly "curse.maven:carbon-config-898104:5504476"
    // implementation "curse.maven:LibVulpes-236541:3801015"
    // implementation "curse.maven:Baubles-227083:2518667"
    // implementation "curse.maven:mm-library-368098:3254750"
}

// Adds Access Transformer files to tasks
if (project.use_access_transformer.toBoolean()) {
    for (File at : sourceSets.getByName("main").resources.files) {
        if (at.name.toLowerCase().endsWith("_at.cfg")) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        }
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    
    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }
    
    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if(project.use_mixins.toBoolean()) {
            attribute_map['TweakClass'] = "org.spongepowered.asm.launch.MixinTweaker"
        }
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = 'jeid_at.cfg'
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
